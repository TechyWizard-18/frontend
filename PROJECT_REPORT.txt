# Sales Management System - Project Report

## Project Overview
This is a comprehensive Sales Management System designed to track customers, manage Purchase Orders (POs), and provide analytical insights for a sales-driven organization. The application allows sales teams to efficiently manage customer relationships, track order statuses, monitor payments, and analyze business performance through interactive dashboards.

---

## Technology Stack

### Frontend
- **React.js** - Modern JavaScript library for building user interfaces
- **Vite** - Fast build tool and development server
- **React Router DOM** - Client-side routing for single-page application
- **Axios** - HTTP client for API requests
- **Recharts** - Data visualization library for analytics charts
- **Framer Motion** - Animation library for smooth page transitions
- **React Toastify** - Toast notifications for user feedback
- **XLSX** - Excel file parsing and generation for data import/export

### Backend
- **Node.js** - JavaScript runtime environment
- **Express.js** - Web application framework for REST API
- **MongoDB** - NoSQL database for data storage
- **Mongoose** - MongoDB object modeling for Node.js
- **JWT (JSON Web Tokens)** - Authentication and authorization
- **bcryptjs** - Password hashing for security
- **CORS** - Cross-Origin Resource Sharing middleware
- **dotenv** - Environment variable management

### Deployment
- **Frontend**: Vercel (with custom proxy configuration)
- **Backend**: Render.com (Node.js hosting)
- **Database**: MongoDB Atlas (cloud database)

---

## Core Features

### 1. Authentication & User Management
- **Secure Login System**: JWT-based authentication with encrypted passwords
- **Role-Based Access**: Admin and standard user roles
- **Admin Panel**: User creation and management (admin-only)
- **Session Management**: Persistent login with token-based authentication

### 2. Customer Management
- **Add New Customers**: Create customer profiles with name, phone, and address
- **Phone Number Validation**: Enforces 10-digit phone number format
- **Customer List View**: Toggle between grid and list layouts
- **Search Functionality**: Search customers by name or phone number
- **Customer Details Page**: View complete customer information and PO history
- **Excel Import**: Bulk import customer data from Excel/CSV files
- **Date & Time Tracking**: Shows when each customer was added to the system

### 3. Purchase Order (PO) Management
- **Create POs**: Add purchase orders with:
  - PO Value (in AED - United Arab Emirates Dirham)
  - PO Type (e.g., Hardware, Software, Services)
  - Detailed Description
  - **Salesman Assignment**: Track which salesman handles each PO
  - **Manual Payment Days Entry**: Enter any number of days (e.g., 21, 30, 45) for payment due countdown
  - **Priority Level**: Mark POs as High or Low priority for better workflow management
- **PO Status Tracking**: Toggle between "Pending", "Dispatched", and "Paid & Dispatched" status
  - **Pending**: Shows payment countdown (payment still due)
  - **Dispatched**: Shows "Dispatched" status badge + payment countdown still visible (order shipped but payment still due)
  - **Paid & Dispatched**: Shows "✓ Paid & Dispatched" with no countdown (order complete and paid)
- **Edit PO Information**: Update PO details including value, type, description, salesman, payment days, and priority
- **PO History**: View all POs associated with each customer
- **Remarks System**: Add notes/reasons for pending POs
- **Payment Countdown System**:
  - **Manual day entry**: Enter any number of days (e.g., 20, 21, 30, 45)
  - **Real-time countdown**: Shows "Due in X days" until payment due (visible for Pending AND Dispatched)
  - **Red Alert**: Payment overdue or "Due TODAY!"
  - **Yellow Alert**: "Due in 1-5 days" (approaching deadline)
  - **Green Alert**: "Due in 6+ days" (comfortable timeframe)
  - **No countdown for Paid & Dispatched**: Once marked as "Paid & Dispatched", countdown is replaced with "✓ Paid & Dispatched"
- **Overdue Highlighting**: POs pending for 5+ days are highlighted in red

### 4. PO Management Dashboard
- **Advanced Filtering**:
  - Search by customer name or PO type
  - Filter by status (All, Pending, Dispatched, Paid & Dispatched)
  - Filter by priority (All, High, Low)
  - Sort by date (newest/oldest) or value (highest first)
  - Date range filtering (start date to end date)
- **Statistics Overview**:
  - Total POs count
  - Pending POs count
  - Dispatched POs count
  - Paid & Dispatched POs count
- **Comprehensive Table View** showing:
  - Date created
  - Customer name (clickable to customer detail page)
  - PO type, value, and description
  - Salesman assigned
  - Payment days with accurate color-coded countdown:
    - **Pending/Dispatched**: Shows "Initial: X days" + "Due in Y days" countdown
    - **Paid & Dispatched**: Shows "✓ Paid & Dispatched" (no countdown)
  - Priority level (High/Low)
  - Current status with inline status change (Pending/Dispatched/Paid & Dispatched)
  - Remarks for pending orders
  - Edit button for updating PO information

### 5. Analytics & Reporting
- **Interactive Dashboard** with multiple visualizations:

  **Summary Cards**:
  - Total customers served
  - Total revenue (in AED)
  - Active pending orders
  - Completed orders count

  **Charts & Graphs**:
  - **Customer Growth Chart**: Line graph showing new customers over time
  - **Unique Customers Served**: Monthly customer engagement tracking
  - **Monthly PO Financial Summary**: Bar chart of monthly order values
  - **Revenue Trend**: Line chart tracking revenue over months
  - **Average Order Value**: Bar chart showing average PO values per month
  - **Order Status Distribution**: Pie chart showing pending vs. dispatched ratio
  - **Top Customers**: Bar chart highlighting highest-value customers

  **Excel Export**: Download complete analytical data including:
  - Customer names
  - Total PO values per customer
  - Monthly summaries
  - Aggregated totals

### 6. Dashboard Features
- **Customer Cards/List**: View all customers in grid or list format
- **Quick Actions**: Click any customer card to view details or add POs
- **Real-time Search**: Filter customers instantly as you type
- **Responsive Design**: Works on desktop, tablet, and mobile devices
- **Animated Transitions**: Smooth page transitions using Framer Motion

---

## System Architecture

### Data Flow
1. **User authenticates** → Backend validates credentials → Returns JWT token
2. **Frontend stores token** → Includes in all API requests
3. **API requests** → Backend validates token → Queries MongoDB
4. **Database returns data** → Backend processes → Sends JSON response
5. **Frontend receives data** → Updates React state → Renders UI

### Database Schema

**Users Collection**:
- username (unique)
- password (hashed)
- role (admin/user)

**Customers Collection**:
- name
- phone (10 digits, unique)
- address
- timestamps (createdAt, updatedAt)

**POs Collection**:
- customerId (reference to Customer)
- ppoValue (number)
- ppoType (string)
- ppoDescription (text)
- salesmanName (string, default: "N/A")
- paymentDaysRemaining (number, countdown to payment due)
- paymentDueDate (calculated date based on days entered)
- initialPaymentDays (number, original days entered for reference)
- priority (High/Low, default: "Low")
- status (Pending/Dispatched/Paid & Dispatched)
- pendingRemark (text)
- timestamps (createdAt, updatedAt)

---

## Key Workflows

### Adding a New Customer and PO
1. Navigate to "Add Customer" page
2. Enter customer details (name, phone, address)
3. Submit form → Automatically redirects to customer detail page
4. Fill PO form with value, type, description, salesman, and payment days (e.g., 21, 30, 45)
5. Submit PO → Appears in PO history instantly
6. System automatically calculates payment due date and starts countdown

### Managing PO Status
1. Go to "PO Management" page
2. View all POs with filtering options
3. Change status using dropdown:
   - "Pending" → Payment countdown active (order not shipped, payment not received)
   - "Dispatched" → Order shipped but payment countdown STILL shows (payment still due)
   - "Paid & Dispatched" → Order shipped AND paid (no countdown shown)
4. Add remarks for pending POs to track reasons for delays
5. Edit PO information if corrections are needed
6. Monitor payment due date alerts for timely follow-ups (countdown shows for Pending AND Dispatched orders)

### Monitoring Business Performance
1. Navigate to "Analytics" page
2. View real-time statistics and charts
3. Analyze customer growth trends
4. Track monthly revenue and order patterns
5. Identify top customers by value
6. Export data to Excel for external reporting

---

## Security Features
- **Password Hashing**: bcrypt encryption for all passwords
- **JWT Authentication**: Secure token-based authentication
- **Protected Routes**: Frontend routes require authentication
- **CORS Configuration**: Controlled cross-origin access
- **Environment Variables**: Sensitive data stored securely
- **Input Validation**: Backend validates all user inputs
- **SQL Injection Prevention**: MongoDB's query system prevents injection attacks

---

## Development Features

### Local vs Production Backend Switching
The application supports easy switching between local development and production environments:

**Local Development**:
- Edit `.env` file: `VITE_BACKEND_URL=http://localhost:5000`
- Start local backend: `cd server` → `npm start`
- Start frontend: `npm run dev`
- Test features without affecting production data

**Production**:
- Edit `.env` file: `VITE_BACKEND_URL=https://backendnode-t8be.onrender.com`
- No backend setup needed
- Frontend connects to hosted backend on Render

**.env file is gitignored** - prevents accidental commits of local configuration

---

## User Interface Design
- **Modern Glassmorphism**: Semi-transparent cards with blur effects
- **Gradient Backgrounds**: Purple-blue gradient theme
- **Responsive Design**: Mobile-first approach
- **Toast Notifications**: Real-time feedback for all actions
- **Loading States**: Spinners and loading indicators
- **Error Handling**: User-friendly error messages
- **Smooth Animations**: Page transitions and micro-interactions

---

## Future Enhancements & Scalability
- **Email Notifications**: Automatic alerts for overdue payments
- **PDF Invoice Generation**: Generate PO invoices
- **Advanced Analytics**: Predictive analytics and forecasting
- **Multi-language Support**: Localization for different regions
- **Mobile App**: Native iOS and Android applications
- **API Documentation**: Swagger/OpenAPI documentation
- **Automated Testing**: Unit and integration tests
- **Backup System**: Automated database backups

---

## Business Value
1. **Improved Efficiency**: Streamlined customer and order management
2. **Better Tracking**: Real-time visibility into order status and payments
3. **Data-Driven Decisions**: Comprehensive analytics for business insights
4. **Accountability**: Track which salesman handles each order
5. **Payment Management**: Automated alerts prevent missed payments
6. **Scalability**: Easily handles growing customer and order volumes
7. **Cost Savings**: Reduces manual paperwork and data entry

---

## Installation & Setup

### Prerequisites
- Node.js (v14 or higher)
- MongoDB (local or Atlas account)
- Git

### Backend Setup
```bash
cd server
npm install
# Create .env file with:
# MONGODB_URI=your_mongodb_connection_string
# JWT_SECRET=your_secret_key
npm start
# Server runs on http://localhost:5000
```

### Frontend Setup
```bash
npm install
# Edit .env file with backend URL
npm run dev
# Frontend runs on http://localhost:5173
```

### Initial Admin User Creation
```bash
cd server
node createFirstAdmin.js
# Follow prompts to create admin account
```

---

## API Endpoints

### Authentication
- `POST /api/users/login` - User login
- `POST /api/users/logout` - User logout

### Customers
- `GET /api/customers` - Get all customers
- `GET /api/customers/:id` - Get customer by ID
- `POST /api/customers` - Create new customer
- `PUT /api/customers/:id` - Update customer
- `DELETE /api/customers/:id` - Delete customer
- `GET /api/customers/:id/ppos` - Get customer's POs
- `POST /api/customers/bulk-import` - Import customers from Excel

### Purchase Orders
- `GET /api/ppos` - Get all POs (with filtering)
- `GET /api/ppos/:id` - Get PO by ID
- `POST /api/ppos` - Create new PO
- `PATCH /api/ppos/:id` - Update PO (status, remarks, details)
- `DELETE /api/ppos/:id` - Delete PO

### Analytics
- `GET /api/analytics/summary` - Get dashboard summary statistics

### Admin (Protected)
- `POST /api/admin/create-user` - Create new user (admin only)
- `GET /api/admin/users` - Get all users (admin only)

---

## File Structure
```
secretproject/
├── public/              # Static assets
├── server/              # Backend Node.js/Express
│   ├── models/          # MongoDB schemas
│   ├── routes/          # API route handlers
│   ├── middleware/      # Authentication middleware
│   └── server.js        # Main server file
├── src/                 # Frontend React application
│   ├── components/      # React components
│   │   └── pages/       # Page components
│   ├── context/         # React Context (Auth, Analytics)
│   └── main.jsx         # Application entry point
├── .env                 # Environment variables (gitignored)
├── .env.production      # Production environment config
└── package.json         # Dependencies and scripts
```

---

## Performance Optimizations
- **MongoDB Indexing**: Indexed customer phone and name fields
- **API Response Caching**: Analytics context caches data
- **Lazy Loading**: Routes and components load on demand
- **Optimized Queries**: Efficient database queries with population
- **Compression**: Gzip compression on backend responses
- **CDN**: Static assets served through Vercel CDN

---

## Conclusion
This Sales Management System is a robust, full-stack application designed to streamline sales operations, improve customer relationship management, and provide valuable business insights. With its modern tech stack, comprehensive feature set, and scalable architecture, it serves as an effective tool for sales teams to manage their daily operations efficiently while maintaining visibility into business performance and financial obligations.

---

**Project Status**: Production-ready
**Last Updated**: October 2025
**Maintained By**: Development Team
**License**: Proprietary

---

## Contact & Support
For technical support or feature requests, please contact the development team or refer to the internal documentation.

